name: Test Install and Build app

# on:
#   push:
#     branches:
#       - dev2.0

on:
  workflow_dispatch:

env:
  REPOSITORY_NAME: ${{secrets.REPOSITORY_NAME}}

jobs:
  security-frontend:
    name: Check Security Frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Yarn Audit
        uses: pragatheeswarans/yarn-audit-action@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          label: audit-issues
          paths: |
            .
            src

  security-backend:
    name: Check Security Backend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Bandit
        run: pip install bandit

      - name: Run Scan
        run: bandit -r ./server -f csv -o bandit-report.csv

      - name: Upload Scan Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.csv

  build-frontend:
    name: Install and Build Frontend
    needs: security-frontend
    if: success()
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - run: |
          make install-frontend
          yarn build
          echo "Success frontend"

  build-backend:
    name: Install and Build Backend
    needs: security-backend
    if: success()
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Poetry
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.7.1 python -
          export PATH="${PATH}:/etc/poetry/bin"

      - name: Backend-Install
        run: |
          make install-backend
          echo "Success backend"

  deploy:
    name: Deploy to host
    needs: [build-backend, build-frontend]
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: 22
          key: ${{ secrets.HOST_SSH_KEY }}
          passphrase: ${{ secrets.HOST_PASSPHRASE }}
          script: |
            cd /var/www/$REPOSITORY_NAME \
            && docker compose pull \
            && docker compose up -d \
            && exit